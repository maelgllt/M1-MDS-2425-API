{
    "openapi": "3.0.0",
    "info": {
        "title": "HackR API - Maël GUILLOTEAU",
        "version": "1.0.0",
        "description": "TP API | HackR API - Maël GUILLOTEAU"
    },
    "paths": {
        "/tools/email-check": {
            "get": {
                "summary": "Check if an email exists",
                "parameters": [
                    {
                        "name": "email",
                        "in": "query",
                        "required": true,
                        "description": "Email address to verify",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Email verification result",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string",
                                    "example": "email exists"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - email required"
                    },
                    "500": {
                        "description": "Error while checking email"
                    }
                }
            }
        },
        "/tools/password-check": {
            "get": {
                "summary": "Check if a password is common",
                "parameters": [
                    {
                        "name": "password",
                        "in": "query",
                        "required": true,
                        "description": "Password to check",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password check result",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string",
                                    "example": "the password is current."
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - password required"
                    },
                    "500": {
                        "description": "Password verification error"
                    }
                }
            }
        },
        "/tools/generate-password": {
            "get": {
                "summary": "Generate a secure random password",
                "parameters": [
                    {
                        "name": "length",
                        "in": "query",
                        "required": false,
                        "description": "The length of the password to generate (default is 12, minimum is 8)",
                        "schema": {
                            "type": "integer",
                            "minimum": 8,
                            "default": 12
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Generated secure password",
                        "content": {
                            "text/plain": {
                                "schema": {
                                    "type": "string",
                                    "example": "Password: 8$^fJk92@B1"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid password length. Minimum 8 characters."
                    }
                }
            }
        },
        "/tools/generate-identity": {
            "get": {
                "summary": "Generate a fake identity",
                "responses": {
                    "200": {
                        "description": "Generated fake identity",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "firstName": {
                                            "type": "string",
                                            "example": "John"
                                        },
                                        "lastName": {
                                            "type": "string",
                                            "example": "Doe"
                                        },
                                        "email": {
                                            "type": "string",
                                            "example": "john.doe@example.com"
                                        },
                                        "address": {
                                            "type": "string",
                                            "example": "1234 Elm Street"
                                        },
                                        "city": {
                                            "type": "string",
                                            "example": "Somecity"
                                        },
                                        "country": {
                                            "type": "string",
                                            "example": "Somecountry"
                                        },
                                        "phone": {
                                            "type": "string",
                                            "example": "(123) 456-7890"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/tools/random-image": {
            "get": {
                "summary": "Generate a random image",
                "description": "Fetches a random image from thispersondoesnotexist.com and returns it as a JPEG image.",
                "responses": {
                    "200": {
                        "description": "Successfully fetched and returned a random image",
                        "content": {
                            "image/jpeg": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary",
                                    "example": "Binary data representing the image"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized, missing or invalid token"
                    },
                    "403": {
                        "description": "Forbidden, insufficient permissions"
                    },
                    "500": {
                        "description": "Internal server error while generating the image"
                    }
                }
            }
        },
        "/tools/domain-info": {
            "get": {
                "summary": "Retrieve information about subdomains for a given domain",
                "parameters": [
                    {
                        "name": "domain",
                        "in": "query",
                        "required": true,
                        "description": "The domain name to retrieve subdomain information for",
                        "schema": {
                            "type": "string",
                            "example": "mydigitalschool.com"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of subdomains for the given domain",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "endpoint": {
                                            "type": "string",
                                            "example": "/v1/domain/mydigitalschool.com/subdomains"
                                        },
                                        "meta": {
                                            "type": "object",
                                            "properties": {
                                                "limit_reached": {
                                                    "type": "boolean",
                                                    "example": false
                                                }
                                            }
                                        },
                                        "subdomain_count": {
                                            "type": "integer",
                                            "example": 7
                                        },
                                        "subdomains": {
                                            "type": "array",
                                            "items": {
                                                "type": "string",
                                                "example": "www"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Domain name is required"
                    },
                    "500": {
                        "description": "Error when retrieving sub-domains"
                    }
                }
            }
        },
        "/tools/crawler": {
            "get": {
                "summary": "Retrieve social media data for a given name",
                "description": "This endpoint queries an external social media search API to fetch data about the given name.",
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "required": true,
                        "description": "The name to search for",
                        "schema": {
                            "type": "string",
                            "example": "John Doe"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "platform": {
                                                        "type": "string",
                                                        "description": "The social media platform"
                                                    },
                                                    "profile_url": {
                                                        "type": "string",
                                                        "description": "URL to the social media profile"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request, missing 'name' query parameter"
                    },
                    "500": {
                        "description": "Internal server error, error while retrieving data from the external API or exceeding the maximum request limit"
                    }
                }
            }
        },
        "/swagger": {
            "get": {
                "summary": "Serve the Swagger JSON file",
                "description": "This endpoint serves the Swagger JSON file that contains the API documentation.",
                "responses": {
                    "200": {
                        "description": "Successfully returned the Swagger JSON documentation",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error, error serving the Swagger JSON file"
                    }
                }
            }
        },
        "/tools/phishing": {
            "get": {
                "summary": "Serve phishing page",
                "description": "Serves an HTML phishing page to the client.",
                "responses": {
                    "200": {
                        "description": "HTML page successfully served"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/tools/phishing/capture": {
            "post": {
                "summary": "Capture phishing data",
                "description": "Saves submitted email and password from the phishing page into a local file.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "example": "example@domain.com",
                                        "description": "Captured email address"
                                    },
                                    "password": {
                                        "type": "string",
                                        "example": "password123",
                                        "description": "Captured password"
                                    }
                                },
                                "required": [
                                    "email",
                                    "password"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Data successfully captured and saved to a local file",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string",
                                    "example": "Captured email and password successfully saved to captures.txt"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request, both email and password are required"
                    },
                    "401": {
                        "description": "Unauthorized, missing or invalid token"
                    },
                    "403": {
                        "description": "Forbidden, insufficient permissions"
                    },
                    "500": {
                        "description": "Internal server error when saving data to file"
                    }
                }
            }
        },
        "/tools/ddos": {
            "post": {
                "summary": "Simulate a DDoS attack by sending multiple requests to a target URL",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "targetUrl": {
                                        "type": "string",
                                        "description": "The target URL to which requests will be sent",
                                        "example": "http://example.com"
                                    },
                                    "numberOfRequests": {
                                        "type": "integer",
                                        "description": "The number of requests to be sent to the target URL",
                                        "example": 100
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Simulation complete, results of the DDoS attack",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Simulation complete."
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "type": "string",
                                                "example": "Request 1 sent to http://example.com"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Target URL and number of requests are required"
                    },
                    "500": {
                        "description": "Error while sending requests"
                    }
                }
            }
        },
        "/register": {
            "post": {
                "summary": "Register a new user",
                "description": "This endpoint allows you to register a new user by providing their email and password. The role of the user can also be specified (roleId), but if not provided, the user will be assigned the default role of 'user' (roleId = 2). Admins can register users by setting roleId to 1.",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "description": "Email address of the user (required). This will be used for user authentication and communication.",
                                        "example": "admin@gmail.fr"
                                    },
                                    "password": {
                                        "type": "string",
                                        "description": "Password for the new user (required). This should be a strong password for securing the account.",
                                        "example": "admin"
                                    },
                                    "roleId": {
                                        "type": "integer",
                                        "description": "Role ID of the user (optional). If provided, it should be 1 for admin or 2 for user. If not provided, it defaults to 2 (user).",
                                        "example": 1
                                    }
                                },
                                "required": [
                                    "email",
                                    "password"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "User successfully created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "id": {
                                            "type": "integer",
                                            "description": "The unique ID of the newly created user"
                                        },
                                        "email": {
                                            "type": "string",
                                            "description": "The email address of the newly created user"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request, missing or invalid input"
                    }
                }
            }
        },
        "/login": {
            "post": {
                "summary": "Login a user and return an access token",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "description": "The email of the user",
                                        "example": "user@example.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "description": "The password of the user",
                                        "example": "password123"
                                    }
                                },
                                "required": [
                                    "email",
                                    "password"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User successfully logged in",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "you are logged in"
                                        },
                                        "access_token": {
                                            "type": "string",
                                            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NSwicm9sZSI6ImFkbWluIiwiaWF0IjoxNzM1OTIwMTU4fQ.tFTPS4Aq3nIkd6V60W9iJgCRnjUSzVHb2_XtGeIAZ1E"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Email or Password is missing"
                    },
                    "401": {
                        "description": "Invalid email or password"
                    },
                    "500": {
                        "description": "Server error"
                    }
                }
            }
        },
        "/logout": {
            "post": {
                "summary": "Logout a user by invalidating their access token",
                "responses": {
                    "200": {
                        "description": "User successfully logged out",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "example": "Successful disconnection."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized, missing or invalid token"
                    }
                }
            }
        },
        "/tools/spammer": {
            "post": {
                "summary": "Send a specified number of spam emails to a given email address",
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "example": "mael.guilloteau@my-digital-school.org",
                                        "description": "Email address to which the spam emails will be sent"
                                    },
                                    "subject": {
                                        "type": "string",
                                        "example": "Spam subject",
                                        "description": "Subject of the spam email"
                                    },
                                    "text": {
                                        "type": "string",
                                        "example": "Spam content",
                                        "description": "Text content of the spam email"
                                    },
                                    "count": {
                                        "type": "integer",
                                        "example": 3,
                                        "description": "Number of spam emails to be sent"
                                    }
                                },
                                "required": [
                                    "email",
                                    "subject",
                                    "text",
                                    "count"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Emails successfully sent",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string",
                                    "example": "3 emails successfully sent to mael.guilloteau@my-digital-school.org"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request, all fields (email, subject, text, count) are required"
                    },
                    "500": {
                        "description": "Internal server error when sending emails"
                    }
                }
            }
        }
    }
}